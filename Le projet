import pygame
import random
import sys

pygame.init()

largeur, hauteur = 800, 800
blanc = (255, 255, 255)
noir = (0, 0, 0)

ecran = pygame.display.set_mode((largeur, hauteur))
pygame.display.set_caption("Jeu de Sudoku")

font = pygame.font.SysFont(None, 50)
pygame.init()

largeur, hauteur = 800, 800
cadrex , cadrey = 100, 100
cadrex1 , cadrey1 = 700, 700
lignes, colonnes = 15, 15
taille_cellule = 600 // 15

noir = (0, 0, 0)
blanc = (127, 127, 127)
gris = (200, 200, 200)
vert = (255,255,255)



plateau = [[0 for _ in range(colonnes)] for _ in range(lignes)]

joueur_actuel = 1

def afficher_texte(texte, x, y, couleur):
    texte_surface = font.render(texte, True, couleur)
    texte_rect = texte_surface.get_rect(center=(x, y))
    ecran.blit(texte_surface, texte_rect)

def bouton(message, x, y, largeur, hauteur, couleur_clair, couleur_fonce, action=None):
    souris = pygame.mouse.get_pos()
    clic = pygame.mouse.get_pressed()

    if x < souris[0] < x + largeur and y < souris[1] < y + hauteur:
        pygame.draw.rect(ecran, couleur_clair, (x, y, largeur, hauteur))
        if clic[0] == 1 and action != None:
            action()
    else:
        pygame.draw.rect(ecran, couleur_fonce, (x, y, largeur, hauteur))

    afficher_texte(message, x + largeur / 2, y + hauteur / 2, noir)

def quitter_jeu():
    pygame.quit()
    sys.exit()

def joueur_vs_joueur():
    def dessiner_plateau():
        ecran.fill(blanc)
        for x in range(cadrex, cadrex1 + 1, taille_cellule):
            pygame.draw.line(ecran, gris, (x, cadrey), (x, cadrey1))
        for y in range(cadrey, cadrey1 + 1, taille_cellule):
            pygame.draw.line(ecran, gris, (cadrex, y), (cadrex1, y))
        pygame.draw.line(ecran, noir, (cadrex, cadrey1), (cadrex1, cadrey1), 2)
        pygame.draw.line(ecran, noir, (cadrex1, cadrey), (cadrex1, cadrey1), 2)
        for ligne in range(lignes):
            for colonne in range(colonnes):
                if plateau[ligne][colonne] != 0:
                    couleur = noir if plateau[ligne][colonne] == 1 else vert

                    x = cadrex + colonne * taille_cellule + taille_cellule // 9-3
                    y = cadrey + ligne * taille_cellule + taille_cellule // 9-3

                    pygame.draw.circle(ecran, couleur, (x, y), taille_cellule // 4)

    def gerer_clic(x, y):
        global joueur_actuel
        colonne = (x - cadrex+20) // taille_cellule
        ligne = (y - cadrey+20) // taille_cellule
        if plateau[ligne][colonne] == 0:
            plateau[ligne][colonne] = joueur_actuel
            if verifier_victoire(ligne, colonne):
                print("Le joueur", joueur_actuel, "a gagné !")
                pygame.quit()
                sys.exit()
            joueur_actuel = 1 if joueur_actuel == 2 else 2

    def verifier_victoire(ligne, colonne):

        alignement = 0
        for j in range(colonnes):
            if plateau[ligne][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
        alignement = 0
        for i in range(lignes):
            if plateau[i][colonne] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0


        alignement = 0
        i, j = ligne, colonne
        while i < lignes and j < colonnes:
            if plateau[i][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i += 1
            j += 1

        i, j = ligne, colonne
        while i >= 0 and j >= 0:
            if plateau[i][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i -= 1
            j -= 1


        alignement = 0
        i, j = ligne, colonne
        while i >= 0 and j < colonnes:
            if plateau[i][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i -= 1
            j += 1

        i, j = ligne, colonne
        while i < lignes and j >= 0:
            if plateau[i][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i += 1
            j -= 1

        return False

    en_cours = True
    while en_cours:
        for evenement in pygame.event.get():
            if evenement.type == pygame.QUIT:
                en_cours = False
            elif evenement.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                gerer_clic(x, y)
                colonne = (x - cadrex) // taille_cellule
                ligne = (y - cadrey) // taille_cellule
                print("Colonne:", colonne)
                print("Ligne:", ligne)

        dessiner_plateau()
        pygame.display.flip()


def joueur_vs_bot():
    def dessiner_plateau():
        ecran.fill(blanc)
        for x in range(cadrex, cadrex1 + 1, taille_cellule):
            pygame.draw.line(ecran, gris, (x, cadrey), (x, cadrey1))
        for y in range(cadrey, cadrey1 + 1, taille_cellule):
            pygame.draw.line(ecran, gris, (cadrex, y), (cadrex1, y))
        pygame.draw.line(ecran, noir, (cadrex, cadrey1), (cadrex1, cadrey1), 2)
        pygame.draw.line(ecran, noir, (cadrex1, cadrey), (cadrex1, cadrey1), 2)
        for ligne in range(lignes):
            for colonne in range(colonnes):
                if plateau[ligne][colonne] != 0:
                    couleur = noir if plateau[ligne][colonne] == 1 else vert
                    x = cadrex + colonne * taille_cellule + taille_cellule // 9 - 3
                    y = cadrey + ligne * taille_cellule + taille_cellule // 9 - 3
                    pygame.draw.circle(ecran, couleur, (x, y), taille_cellule // 4)

    def gerer_clic(x, y):
        colonne = (x - cadrex + 20) // taille_cellule
        ligne = (y - cadrey + 20) // taille_cellule
        if plateau[ligne][colonne] == 0:
            plateau[ligne][colonne] = 1
            if verifier_victoire(ligne, colonne, 1):
                print("Le joueur a gagné !")
                pygame.quit()
                sys.exit()
            else:
                jouer_bot()
                if verifier_victoire(ligne, colonne, 2):
                    print("Le bot a gagné !")
                    pygame.quit()
                    sys.exit()

    def verifier_victoire(ligne, colonne, joueur):
        alignement = 0
        for j in range(colonnes):
            if plateau[ligne][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
        alignement = 0
        for i in range(lignes):
            if plateau[i][colonne] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0


        alignement = 0
        i, j = ligne, colonne
        while i < lignes and j < colonnes:
            if plateau[i][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i += 1
            j += 1

        i, j = ligne, colonne
        while i >= 0 and j >= 0:
            if plateau[i][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i -= 1
            j -= 1


        alignement = 0
        i, j = ligne, colonne
        while i >= 0 and j < colonnes:
            if plateau[i][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i -= 1
            j += 1

        i, j = ligne, colonne
        while i < lignes and j >= 0:
            if plateau[i][j] == joueur_actuel:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i += 1
            j -= 1

        return False



    def jouer_bot():

        while True:
            ligne = random.randint(0, lignes - 1)
            colonne = random.randint(0, colonnes - 1)
            if plateau[ligne][colonne] == 0:
                plateau[ligne][colonne] = 2
                break

    en_cours = True
    while en_cours:
        for evenement in pygame.event.get():
            if evenement.type == pygame.QUIT:
                en_cours = False
            elif evenement.type == pygame.MOUSEBUTTONDOWN:
                x, y = pygame.mouse.get_pos()
                gerer_clic(x, y)

        dessiner_plateau()
        pygame.display.flip()

    pygame.quit()
    print("Joueur vs Bot")

def bot_vs_bot():
    def dessiner_plateau():
        ecran.fill(blanc)
        for x in range(cadrex, cadrex1 + 1, taille_cellule):
            pygame.draw.line(ecran, gris, (x, cadrey), (x, cadrey1))
        for y in range(cadrey, cadrey1 + 1, taille_cellule):
            pygame.draw.line(ecran, gris, (cadrex, y), (cadrex1, y))
        pygame.draw.line(ecran, noir, (cadrex, cadrey1), (cadrex1, cadrey1), 2)
        pygame.draw.line(ecran, noir, (cadrex1, cadrey), (cadrex1, cadrey1), 2)
        for ligne in range(lignes):
            for colonne in range(colonnes):
                if plateau[ligne][colonne] != 0:
                    couleur = noir if plateau[ligne][colonne] == 1 else vert
                    x = cadrex + colonne * taille_cellule + taille_cellule // 9 - 3
                    y = cadrey + ligne * taille_cellule + taille_cellule // 9 - 3
                    pygame.draw.circle(ecran, couleur, (x, y), taille_cellule // 4)

    def verifier_victoire(ligne, colonne, joueur):
        alignement = 0
        for j in range(colonnes):
            if plateau[ligne][j] == joueur:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
        alignement = 0
        for i in range(lignes):
            if plateau[i][colonne] == joueur:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0

        alignement = 0
        i, j = ligne, colonne
        while i < lignes and j < colonnes:
            if plateau[i][j] == joueur:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i += 1
            j += 1

        i, j = ligne, colonne
        while i >= 0 and j >= 0:
            if plateau[i][j] == joueur:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i -= 1
            j -= 1

        alignement = 0
        i, j = ligne, colonne
        while i >= 0 and j < colonnes:
            if plateau[i][j] == joueur:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i -= 1
            j += 1

        i, j = ligne, colonne
        while i < lignes and j >= 0:
            if plateau[i][j] == joueur:
                alignement += 1
                if alignement == 5:
                    return True
            else:
                alignement = 0
            i += 1
            j -= 1

        return False

    def jouer_bot_1():
        while True:
            ligne = random.randint(0, lignes - 1)
            colonne = random.randint(0, colonnes - 1)
            if plateau[ligne][colonne] == 0:
                plateau[ligne][colonne] = 1
                if verifier_victoire(ligne, colonne, 1):
                    print("Le premier bot a gagné !")
                    pygame.quit()
                    sys.exit()
                break

    def jouer_bot_2():
        while True:
            ligne = random.randint(0, lignes - 1)
            colonne = random.randint(0, colonnes - 1)
            if plateau[ligne][colonne] == 0:
                plateau[ligne][colonne] = 2
                if verifier_victoire(ligne, colonne, 2):
                    print("Le deuxième bot a gagné !")
                    pygame.quit()
                    sys.exit()
                break

    en_cours = True
    while en_cours:
        for evenement in pygame.event.get():
            if evenement.type == pygame.QUIT:
                en_cours = False

        jouer_bot_1()
        dessiner_plateau()
        pygame.display.flip()
        pygame.time.wait(750)


        jouer_bot_2()
        dessiner_plateau()
        pygame.display.flip()
        pygame.time.wait(750)



    print("Bot vs Bot")

def afficher_menu():
    en_cours = True
    while en_cours:
        for evenement in pygame.event.get():
            if evenement.type == pygame.QUIT:
                en_cours = False

        ecran.fill(blanc)
        afficher_texte("Choisissez un Mode de Jeu", largeur // 2, 100, noir)

        bouton("Joueur vs Joueur", 150, 300, 500, 100, (0, 255, 0), (0, 200, 0), joueur_vs_joueur)
        bouton("Joueur vs Bot", 150, 450, 500, 100, (255, 0, 0), (200, 0, 0), joueur_vs_bot)
        bouton("Bot vs Bot", 150, 600, 500, 100, (0, 0, 255), (0, 0, 200), bot_vs_bot)
        bouton("Quitter", 150, 750, 500, 100, (255, 255, 0), (200, 200, 0), quitter_jeu)

        pygame.display.update()

    pygame.quit()

afficher_menu()
